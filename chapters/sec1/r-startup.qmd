# R Startup

My first car in high school was a 2001 Toyota Corolla. I loved this car mostly for its simplicity; I would turn on the car, and start driving. Fast forward 20+ years, when I turn on my current car now, there are a series of actions completed before I start driving including:

-   The steering wheel adjusts to my pre-configured height.
-   My cell phone connects to to the car's bluetooth.
-   Radio turns on and switches to my favorite station.

Now imagine if someone taller than me, with a different cell phone, and different taste in music turns on my car. They are going to have a bad experience because my car is customized to me.

R is like my car. When "turning on" a new R session, there are a series of setup tasks that are completed before you can "start driving". This is a very powerful feature of R which allows you to customize R to your specific needs. However, customizing the R startup process adds an extra layer of complexity to your R environment which may result in non-portable and non-reproducible code.

::: callout-warning
To ensure reproducibility, it is recommend that users do not modify the R startup process.
:::

For reproducible workflows, it is still important to know what files can alter the R startup process which may help troubleshoot unexpected behavior. In this chapter, we will step through the R startup process and discuss the various files that can alter your R environment.

## Startup Overview

The R startup process can be summarized in three steps:

1.  Start R
2.  Set environment variables
3.  Source Profile Scripts

![](/images/r_startup.jpg){fig-align="center"}

### Start R

R is initialized from your `R_HOME` directory which can be accessed by running the command `R.home(component = "home")` in your R session. Within the `R_HOME/etc/` directory will be a file called `Renviron`. This file contains environment variables set by R in the configure process and **should never be manually modified**.

### Set Environment Variables

You can list the environment variables currently set in your active R session by running the command `Sys.getenv()`. These variables can affect the behavior of your R session and are initially set within the `R_HOME/etc/Renviron` file upon R startup.

**Renviron** files are used to add or modify environment variables when starting R. Each line of an **Renviron** file should be in the form *name=value*:

``` r
name1=value1
name2=value2
name3=value3
```

::: callout-important
**Renviron** files do not contain R code! They are plain text files in the form of `name=value`
:::

If you are running R on a server (e.g. RStudio Workbench), R will first look for a file defined by the `R_ENVIRON` environment variable. If that variable is not set, then R will next look for `Renviron.site` file within the `R_HOME/etc/` directory. Changes to either of these files will alter all R sessions on the server.

If there are no server wide Renviron files, R will next search for user-level **Renviron** files, starting with a file defined the the `R_ENVIRON_USER` environment variable. If this variable is not set, R will first look for a `.Renviron` file file with the users working directory. Your working is the current directory where R will will look for and save files. It can be accessed by running `getwd()` and often referenced as `.` in R.

If a `.Renviron` file is not found within the working directory, R will next search a users home directory. This is the default working directory when R starts up and is often referenced as `~` in R.

### Source Profile Scripts

Unlike **Renviron** files, **RProfile** files contain R code. There are no rules as to what can go in **RProfile** files, but it's crucial to consider reproducibility. Before modifying an **RProfile** file, ask yourself "will this code be *required* to run my analysis?" If yes, then it's recommended to not include it in the **RProfile** startup files.

**RProfile** files follow a similar convention as **Renviron** files. If running R on a server, R first looks for a file pointed to by the `R_PROFILE` environment variable. If this is not set, then R will search for `R_HOME/etc/RProfile.site`. If neither of these are set, or if running R locally, then R will search for a `.Rprofile` file within the user's working and home directories, respectively.

## Other startup files

I leveraging R within RStudio Workbench or RStudio Server, your system administrator may have additional files configured to set default package repositories including `rsession.conf` and `repos.conf`. These files are scoped at the highest level, meaning if you make any changes to your default repositories in the **Renviron** or **Rprofile** files, these changes will override the **conf** files.
